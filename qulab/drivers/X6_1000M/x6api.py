# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
import _x6api

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _x6api.delete_SwigPyIterator

    def value(self):
        return _x6api.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _x6api.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _x6api.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _x6api.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _x6api.SwigPyIterator_equal(self, x)

    def copy(self):
        return _x6api.SwigPyIterator_copy(self)

    def next(self):
        return _x6api.SwigPyIterator_next(self)

    def __next__(self):
        return _x6api.SwigPyIterator___next__(self)

    def previous(self):
        return _x6api.SwigPyIterator_previous(self)

    def advance(self, n):
        return _x6api.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _x6api.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _x6api.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _x6api.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _x6api.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _x6api.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _x6api.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _x6api:
_x6api.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _x6api.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _x6api.IntVector___nonzero__(self)

    def __bool__(self):
        return _x6api.IntVector___bool__(self)

    def __len__(self):
        return _x6api.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _x6api.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _x6api.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _x6api.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _x6api.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _x6api.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _x6api.IntVector___setitem__(self, *args)

    def pop(self):
        return _x6api.IntVector_pop(self)

    def append(self, x):
        return _x6api.IntVector_append(self, x)

    def empty(self):
        return _x6api.IntVector_empty(self)

    def size(self):
        return _x6api.IntVector_size(self)

    def swap(self, v):
        return _x6api.IntVector_swap(self, v)

    def begin(self):
        return _x6api.IntVector_begin(self)

    def end(self):
        return _x6api.IntVector_end(self)

    def rbegin(self):
        return _x6api.IntVector_rbegin(self)

    def rend(self):
        return _x6api.IntVector_rend(self)

    def clear(self):
        return _x6api.IntVector_clear(self)

    def get_allocator(self):
        return _x6api.IntVector_get_allocator(self)

    def pop_back(self):
        return _x6api.IntVector_pop_back(self)

    def erase(self, *args):
        return _x6api.IntVector_erase(self, *args)

    def __init__(self, *args):
        _x6api.IntVector_swiginit(self, _x6api.new_IntVector(*args))

    def push_back(self, x):
        return _x6api.IntVector_push_back(self, x)

    def front(self):
        return _x6api.IntVector_front(self)

    def back(self):
        return _x6api.IntVector_back(self)

    def assign(self, n, x):
        return _x6api.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _x6api.IntVector_resize(self, *args)

    def insert(self, *args):
        return _x6api.IntVector_insert(self, *args)

    def reserve(self, n):
        return _x6api.IntVector_reserve(self, n)

    def capacity(self):
        return _x6api.IntVector_capacity(self)
    __swig_destroy__ = _x6api.delete_IntVector

# Register IntVector in _x6api:
_x6api.IntVector_swigregister(IntVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _x6api.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _x6api.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _x6api.DoubleVector___bool__(self)

    def __len__(self):
        return _x6api.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _x6api.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _x6api.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _x6api.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _x6api.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _x6api.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _x6api.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _x6api.DoubleVector_pop(self)

    def append(self, x):
        return _x6api.DoubleVector_append(self, x)

    def empty(self):
        return _x6api.DoubleVector_empty(self)

    def size(self):
        return _x6api.DoubleVector_size(self)

    def swap(self, v):
        return _x6api.DoubleVector_swap(self, v)

    def begin(self):
        return _x6api.DoubleVector_begin(self)

    def end(self):
        return _x6api.DoubleVector_end(self)

    def rbegin(self):
        return _x6api.DoubleVector_rbegin(self)

    def rend(self):
        return _x6api.DoubleVector_rend(self)

    def clear(self):
        return _x6api.DoubleVector_clear(self)

    def get_allocator(self):
        return _x6api.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _x6api.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _x6api.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _x6api.DoubleVector_swiginit(self, _x6api.new_DoubleVector(*args))

    def push_back(self, x):
        return _x6api.DoubleVector_push_back(self, x)

    def front(self):
        return _x6api.DoubleVector_front(self)

    def back(self):
        return _x6api.DoubleVector_back(self)

    def assign(self, n, x):
        return _x6api.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _x6api.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _x6api.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _x6api.DoubleVector_reserve(self, n)

    def capacity(self):
        return _x6api.DoubleVector_capacity(self)
    __swig_destroy__ = _x6api.delete_DoubleVector

# Register DoubleVector in _x6api:
_x6api.DoubleVector_swigregister(DoubleVector)

class RxSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BusmasterSize = property(_x6api.RxSettings_BusmasterSize_get, _x6api.RxSettings_BusmasterSize_set)
    SampleRate = property(_x6api.RxSettings_SampleRate_get, _x6api.RxSettings_SampleRate_set)
    ExternalTrigger = property(_x6api.RxSettings_ExternalTrigger_get, _x6api.RxSettings_ExternalTrigger_set)
    EdgeTrigger = property(_x6api.RxSettings_EdgeTrigger_get, _x6api.RxSettings_EdgeTrigger_set)
    Framed = property(_x6api.RxSettings_Framed_get, _x6api.RxSettings_Framed_set)
    FrameSize = property(_x6api.RxSettings_FrameSize_get, _x6api.RxSettings_FrameSize_set)
    repeats = property(_x6api.RxSettings_repeats_get, _x6api.RxSettings_repeats_set)
    TriggerDelayPeriod = property(_x6api.RxSettings_TriggerDelayPeriod_get, _x6api.RxSettings_TriggerDelayPeriod_set)
    ActiveChannels = property(_x6api.RxSettings_ActiveChannels_get, _x6api.RxSettings_ActiveChannels_set)
    DecimationEnable = property(_x6api.RxSettings_DecimationEnable_get, _x6api.RxSettings_DecimationEnable_set)
    DecimationFactor = property(_x6api.RxSettings_DecimationFactor_get, _x6api.RxSettings_DecimationFactor_set)
    PacketSize = property(_x6api.RxSettings_PacketSize_get, _x6api.RxSettings_PacketSize_set)
    ForceSize = property(_x6api.RxSettings_ForceSize_get, _x6api.RxSettings_ForceSize_set)
    TestCounterEnable = property(_x6api.RxSettings_TestCounterEnable_get, _x6api.RxSettings_TestCounterEnable_set)
    TestGenMode = property(_x6api.RxSettings_TestGenMode_get, _x6api.RxSettings_TestGenMode_set)
    Gain = property(_x6api.RxSettings_Gain_get, _x6api.RxSettings_Gain_set)
    Offset = property(_x6api.RxSettings_Offset_get, _x6api.RxSettings_Offset_set)
    Calibrated = property(_x6api.RxSettings_Calibrated_get, _x6api.RxSettings_Calibrated_set)

    def __init__(self):
        _x6api.RxSettings_swiginit(self, _x6api.new_RxSettings())
    __swig_destroy__ = _x6api.delete_RxSettings

# Register RxSettings in _x6api:
_x6api.RxSettings_swigregister(RxSettings)

class TxSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BusmasterSize = property(_x6api.TxSettings_BusmasterSize_get, _x6api.TxSettings_BusmasterSize_set)
    SampleRate = property(_x6api.TxSettings_SampleRate_get, _x6api.TxSettings_SampleRate_set)
    ExternalTrigger = property(_x6api.TxSettings_ExternalTrigger_get, _x6api.TxSettings_ExternalTrigger_set)
    EdgeTrigger = property(_x6api.TxSettings_EdgeTrigger_get, _x6api.TxSettings_EdgeTrigger_set)
    Framed = property(_x6api.TxSettings_Framed_get, _x6api.TxSettings_Framed_set)
    FrameSize = property(_x6api.TxSettings_FrameSize_get, _x6api.TxSettings_FrameSize_set)
    TriggerDelayPeriod = property(_x6api.TxSettings_TriggerDelayPeriod_get, _x6api.TxSettings_TriggerDelayPeriod_set)
    ActiveChannels = property(_x6api.TxSettings_ActiveChannels_get, _x6api.TxSettings_ActiveChannels_set)
    DecimationEnable = property(_x6api.TxSettings_DecimationEnable_get, _x6api.TxSettings_DecimationEnable_set)
    DecimationFactor = property(_x6api.TxSettings_DecimationFactor_get, _x6api.TxSettings_DecimationFactor_set)
    PacketSize = property(_x6api.TxSettings_PacketSize_get, _x6api.TxSettings_PacketSize_set)
    AutoPreconfig = property(_x6api.TxSettings_AutoPreconfig_get, _x6api.TxSettings_AutoPreconfig_set)
    Gain = property(_x6api.TxSettings_Gain_get, _x6api.TxSettings_Gain_set)
    Offset = property(_x6api.TxSettings_Offset_get, _x6api.TxSettings_Offset_set)
    Calibrated = property(_x6api.TxSettings_Calibrated_get, _x6api.TxSettings_Calibrated_set)
    Pattern = property(_x6api.TxSettings_Pattern_get, _x6api.TxSettings_Pattern_set)
    LoadedPatterns = property(_x6api.TxSettings_LoadedPatterns_get, _x6api.TxSettings_LoadedPatterns_set)

    def __init__(self):
        _x6api.TxSettings_swiginit(self, _x6api.new_TxSettings())
    __swig_destroy__ = _x6api.delete_TxSettings

# Register TxSettings in _x6api:
_x6api.TxSettings_swigregister(TxSettings)

class ApplicationSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Target = property(_x6api.ApplicationSettings_Target_get, _x6api.ApplicationSettings_Target_set)
    ExtClockSrcSelection = property(_x6api.ApplicationSettings_ExtClockSrcSelection_get, _x6api.ApplicationSettings_ExtClockSrcSelection_set)
    ReferenceClockSource = property(_x6api.ApplicationSettings_ReferenceClockSource_get, _x6api.ApplicationSettings_ReferenceClockSource_set)
    ReferenceRate = property(_x6api.ApplicationSettings_ReferenceRate_get, _x6api.ApplicationSettings_ReferenceRate_set)
    SampleClockSource = property(_x6api.ApplicationSettings_SampleClockSource_get, _x6api.ApplicationSettings_SampleClockSource_set)
    ExtTriggerSrcSelection = property(_x6api.ApplicationSettings_ExtTriggerSrcSelection_get, _x6api.ApplicationSettings_ExtTriggerSrcSelection_set)
    ModuleName = property(_x6api.ApplicationSettings_ModuleName_get, _x6api.ApplicationSettings_ModuleName_set)
    ModuleRevision = property(_x6api.ApplicationSettings_ModuleRevision_get, _x6api.ApplicationSettings_ModuleRevision_set)
    Rx = property(_x6api.ApplicationSettings_Rx_get, _x6api.ApplicationSettings_Rx_set)
    Tx = property(_x6api.ApplicationSettings_Tx_get, _x6api.ApplicationSettings_Tx_set)

    def __init__(self):
        _x6api.ApplicationSettings_swiginit(self, _x6api.new_ApplicationSettings())
    __swig_destroy__ = _x6api.delete_ApplicationSettings

# Register ApplicationSettings in _x6api:
_x6api.ApplicationSettings_swigregister(ApplicationSettings)

class X6api(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _x6api.X6api_swiginit(self, _x6api.new_X6api())
    __swig_destroy__ = _x6api.delete_X6api

    def do_trigger(self, trig_n):
        return _x6api.X6api_do_trigger(self, trig_n)

    def BoardCount(self):
        return _x6api.X6api_BoardCount(self)

    def BoardNames(self):
        return _x6api.X6api_BoardNames(self)

    def PrintDevices(self):
        return _x6api.X6api_PrintDevices(self)

    def ParaInit(self):
        return _x6api.X6api_ParaInit(self)

    def Open(self, target):
        return _x6api.X6api_Open(self, target)

    def IsOpen(self):
        return _x6api.X6api_IsOpen(self)

    def Close(self):
        return _x6api.X6api_Close(self)

    def StreamPreconfigure(self):
        return _x6api.X6api_StreamPreconfigure(self)

    def StartStreaming(self):
        return _x6api.X6api_StartStreaming(self)

    def StopStreaming(self):
        return _x6api.X6api_StopStreaming(self)

    def set_ReferenceClockSource(self, ref_clk_s):
        return _x6api.X6api_set_ReferenceClockSource(self, ref_clk_s)

    def set_SampleClockSource(self, sample_clk_s):
        return _x6api.X6api_set_SampleClockSource(self, sample_clk_s)

    def set_ExternalTrigger(self, ext_trig):
        return _x6api.X6api_set_ExternalTrigger(self, ext_trig)

    def set_AdcRate(self, rate):
        return _x6api.X6api_set_AdcRate(self, rate)

    def set_DacRate(self, rate):
        return _x6api.X6api_set_DacRate(self, rate)

    def set_AdcFrameSize(self, size):
        return _x6api.X6api_set_AdcFrameSize(self, size)

    def set_DacFrameSize(self, size):
        return _x6api.X6api_set_DacFrameSize(self, size)

    def set_AdcRepeats(self, repeats):
        return _x6api.X6api_set_AdcRepeats(self, repeats)

    def set_AdcActiveChannel(self, active_channels):
        return _x6api.X6api_set_AdcActiveChannel(self, active_channels)

    def set_DacActiveChannel(self, active_channels):
        return _x6api.X6api_set_DacActiveChannel(self, active_channels)

    def IsStreaming(self):
        return _x6api.X6api_IsStreaming(self)

    def write_wishbone_register(self, baseAddr, offset, data):
        return _x6api.X6api_write_wishbone_register(self, baseAddr, offset, data)

    def read_wishbone_register(self, baseAddr, offset):
        return _x6api.X6api_read_wishbone_register(self, baseAddr, offset)

    def WriteRom(self):
        return _x6api.X6api_WriteRom(self)

    def ReadRom(self):
        return _x6api.X6api_ReadRom(self)

    def OutputChannels(self):
        return _x6api.X6api_OutputChannels(self)

    def InputChannels(self):
        return _x6api.X6api_InputChannels(self)
    Settings = property(_x6api.X6api_Settings_get, _x6api.X6api_Settings_set)
    Builder = property(_x6api.X6api_Builder_get, _x6api.X6api_Builder_set)
    adc_data_ = property(_x6api.X6api_adc_data__get, _x6api.X6api_adc_data__set)

    def read_adc_data(self):
        return _x6api.X6api_read_adc_data(self)
    wavedata_ = property(_x6api.X6api_wavedata__get, _x6api.X6api_wavedata__set)

    def write_dac_wavedata(self, wavedata):
        return _x6api.X6api_write_dac_wavedata(self, wavedata)

    def DacTestStatus(self):
        return _x6api.X6api_DacTestStatus(self)

    def ClearDacTestStatus(self):
        return _x6api.X6api_ClearDacTestStatus(self)

    def Temperature(self):
        return _x6api.X6api_Temperature(self)

    def PllLocked(self):
        return _x6api.X6api_PllLocked(self)

    def DacInternalCal(self):
        return _x6api.X6api_DacInternalCal(self)

    def EnterPatternMode(self):
        return _x6api.X6api_EnterPatternMode(self)

    def LeavePatternMode(self):
        return _x6api.X6api_LeavePatternMode(self)

    def PatternLoadCommand(self):
        return _x6api.X6api_PatternLoadCommand(self)

    def PatternReplayCommand(self):
        return _x6api.X6api_PatternReplayCommand(self)

    def PatternSize(self):
        return _x6api.X6api_PatternSize(self)

    def BufferTransmit(self):
        return _x6api.X6api_BufferTransmit(self)

    def ManualTrigger(self, state):
        return _x6api.X6api_ManualTrigger(self, state)

    def FpgaLogicVersion(self):
        return _x6api.X6api_FpgaLogicVersion(self)

    def FpgaHardwareVariant(self):
        return _x6api.X6api_FpgaHardwareVariant(self)

    def PciLogicRevision(self):
        return _x6api.X6api_PciLogicRevision(self)

    def FpgaLogicSubrevision(self):
        return _x6api.X6api_FpgaLogicSubrevision(self)

    def PciLogicType(self):
        return _x6api.X6api_PciLogicType(self)

    def PciLogicPcb(self):
        return _x6api.X6api_PciLogicPcb(self)

    def FpgaName(self):
        return _x6api.X6api_FpgaName(self)

    def PCIExpressLanes(self):
        return _x6api.X6api_PCIExpressLanes(self)

    def BitStreamDate(self):
        return _x6api.X6api_BitStreamDate(self)

    def BitStreamTime(self):
        return _x6api.X6api_BitStreamTime(self)

# Register X6api in _x6api:
_x6api.X6api_swigregister(X6api)



